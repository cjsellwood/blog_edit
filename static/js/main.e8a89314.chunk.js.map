{"version":3,"sources":["components/Post.js","components/NewForm.js","components/EditForm.js","components/Login.js","components/Auth.js","components/Spinner.js","App.js","index.js"],"names":["Post","props","id","useParams","filteredPost","posts","filter","el","_id","comments","title","map","comment","username","className","Date","date","toLocaleDateString","text","onClick","e","deleteComment","to","deletePost","data-id","onSubmit","addComment","method","htmlFor","onChange","handleInput","type","name","placeholder","value","required","rows","NewForm","newPost","handlePostInput","postForm","checked","published","EditForm","useEffect","startEditing","handleEditSubmit","handleEditInput","editPost","Login","login","loginFormInput","loginForm","password","Auth","Fragment","auth","loggedIn","children","Spinner","App","useState","setPosts","loading","setLoading","history","useHistory","baseUrl","clonePosts","fetch","mode","headers","then","res","json","data","publish","preventDefault","index","target","getAttribute","i","options","Authorization","token","body","JSON","stringify","status","Error","clonedPosts","splice","post","catch","err","message","push","postsDisplay","length","setComment","setPostForm","setEditPost","setLoginForm","setAuth","localStorage","getItem","expires","now","Number","getToken","path","console","log","setItem","editedPost","replace","commentId","filteredComments","exact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e8a89314.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Post.css\";\nimport { useParams, Link } from \"react-router-dom\";\n\nconst Post = (props) => {\n  const { id } = useParams();\n\n  const filteredPost = props.posts.filter((el) => {\n    return el._id === id;\n  })[0];\n\n  let comments = null;\n  if (typeof filteredPost.title !== \"undefined\") {\n    comments = filteredPost.comments.map((comment) => {\n      return (\n        <li key={comment._id}>\n          <p>{comment.username}</p>\n          <p className=\"date\">{new Date(comment.date).toLocaleDateString()}</p>\n          <p className=\"comment-text\">{comment.text}</p>\n          <button onClick={(e) => props.deleteComment(id, comment._id, e)}>Delete</button>\n        </li>\n      );\n    });\n  }\n\n  return (\n    <div className=\"Post\">\n      <h1 className=\"title\">{filteredPost.title}</h1>\n      <p className=\"date\">{new Date(filteredPost.date).toLocaleDateString()}</p>\n      <p>{filteredPost.text}</p>\n      <div className=\"update-buttons\">\n        <Link to={`/${filteredPost._id}/edit`}>Edit</Link>\n        <button onClick={props.deletePost} data-id={filteredPost._id}>Delete</button>\n      </div>\n      <h2 className=\"comment-title\">Comments</h2>\n      <ol className=\"comment-list\">{comments}</ol>\n      <form\n        onSubmit={props.addComment}\n        method=\"POST\"\n        data-id={id}\n        className=\"form\"\n      >\n        <h3>Add Comment</h3>\n        <div>\n          <label htmlFor=\"username\">Username</label>\n          <input\n            onChange={props.handleInput}\n            type=\"text\"\n            name=\"username\"\n            placeholder=\"username\"\n            id=\"username\"\n            value={props.comment.username}\n            required\n          />\n        </div>\n        <div>\n          <label htmlFor=\"text\">Comment</label>\n          <textarea\n            onChange={props.handleInput}\n            id=\"text\"\n            name=\"text\"\n            placeholder=\"Comment\"\n            value={props.comment.text}\n            required\n            rows=\"5\"\n          ></textarea>\n        </div>\n        <button type=\"submit\">Submit</button>\n      </form>\n    </div>\n  );\n};\n\nexport default Post;\n","import React from \"react\";\nimport \"./NewForm.css\";\n\nconst NewForm = (props) => {\n  return (\n    <div className=\"NewForm\">\n      <h1 className=\"title\">New Blog Post</h1>\n      <form className=\"form\" onSubmit={props.newPost}>\n        <div>\n          <label htmlFor=\"title\">Title</label>\n          <input\n            type=\"text\"\n            placeholder=\"Title\"\n            name=\"title\"\n            id=\"title\"\n            onChange={props.handlePostInput}\n            value={props.postForm.title}\n            required\n          />\n        </div>\n        <div>\n          <label htmlFor=\"text\">Content</label>\n          <textarea\n            placeholder=\"Content\"\n            name=\"text\"\n            id=\"text\"\n            rows=\"20\"\n            onChange={props.handlePostInput}\n            value={props.postForm.text}\n            required\n          ></textarea>\n        </div>\n        <div className=\"radio\">\n          <p>Publish Now?</p>\n          <input\n            type=\"radio\"\n            id=\"publish\"\n            name=\"published\"\n            value=\"true\"\n            onChange={props.handlePostInput}\n            checked={props.postForm.published}\n          />\n          <label htmlFor=\"publish\">Yes</label>\n          <br></br>\n          <input\n            type=\"radio\"\n            id=\"unpublish\"\n            name=\"published\"\n            value=\"false\"\n            onChange={props.handlePostInput}\n            checked={!props.postForm.published}\n          />\n          <label htmlFor=\"unpublish\">No</label>\n        </div>\n        <button>Submit</button>\n      </form>\n    </div>\n  );\n};\n\nexport default NewForm;\n","import React, { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nconst EditForm = (props) => {\n  const { id } = useParams();\n  useEffect(() => {\n    props.startEditing(id);\n  }, []);\n\n  return (\n    <div className=\"NewForm\">\n      <h1 className=\"title\">Edit Blog Post</h1>\n      <form\n        className=\"form\"\n        onSubmit={props.handleEditSubmit}\n        data-id={id}\n      >\n        <div>\n          <label htmlFor=\"title\">Title</label>\n          <input\n            type=\"text\"\n            placeholder=\"Title\"\n            name=\"title\"\n            id=\"title\"\n            onChange={props.handleEditInput}\n            value={props.editPost.title}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"text\">Content</label>\n          <textarea\n            placeholder=\"Content\"\n            name=\"text\"\n            id=\"text\"\n            rows=\"20\"\n            onChange={props.handleEditInput}\n            value={props.editPost.text}\n          ></textarea>\n        </div>\n        <div className=\"radio\">\n          <p>Publish Now?</p>\n          <input\n            type=\"radio\"\n            id=\"publish\"\n            name=\"published\"\n            value=\"true\"\n            onChange={props.handleEditInput}\n            checked={props.editPost.published}\n          />\n          <label htmlFor=\"publish\">Yes</label>\n          <br></br>\n          <input\n            type=\"radio\"\n            id=\"unpublish\"\n            name=\"published\"\n            value=\"false\"\n            onChange={props.handleEditInput}\n            checked={!props.editPost.published}\n          />\n          <label htmlFor=\"unpublish\">No</label>\n        </div>\n        <button>Submit</button>\n      </form>\n    </div>\n  );\n};\n\nexport default EditForm;\n","import React from \"react\";\n\nconst Login = (props) => {\n  return (\n    <div>\n      <h1 className=\"title\">Login</h1>\n      <form onSubmit={props.login} className=\"form\">\n        <div>\n          <label htmlFor=\"username\">Username</label>\n          <input\n            type=\"text\"\n            name=\"username\"\n            id=\"username\"\n            onChange={props.loginFormInput}\n            value={props.loginForm.username}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"password\">Password</label>\n          <input\n            type=\"password\"\n            name=\"password\"\n            id=\"password\"\n            onChange={props.loginFormInput}\n            value={props.loginForm.password}\n          />\n        </div>\n        <button type=\"submit\">Login</button>\n      </form>\n    </div>\n  );\n};\n\nexport default Login;\n","import React from \"react\";\nimport {Redirect} from \"react-router-dom\"\n\n// Auth wrapping component\nconst Auth = (props) => {\n  return (\n    <React.Fragment>\n      {props.auth.loggedIn ? props.children : <Redirect to=\"/login\"></Redirect>}\n    </React.Fragment>\n  );\n};\n\nexport default Auth;\n","import React from \"react\";\nimport \"./Spinner.css\"\n\nconst Spinner = () => {\n  return (\n    <div className=\"loader-wrapper\">\n      <div className=\"loader\">Loading</div>\n    </div>\n  );\n};\n\nexport default Spinner;\n","import \"./App.css\";\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { Switch, Link, Route, useHistory } from \"react-router-dom\";\nimport Post from \"./components/Post\";\nimport NewForm from \"./components/NewForm\";\nimport EditForm from \"./components/EditForm\";\nimport Login from \"./components/Login\";\nimport Auth from \"./components/Auth\";\nimport Spinner from \"./components/Spinner\"\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  let history = useHistory();\n  const baseUrl = \"https://desolate-sands-05653.herokuapp.com\"\n\n  // Clone posts immutably\n  const clonePosts = (posts) => {\n    return posts.map((el) => {\n      return {\n        ...el,\n        comments: [...el.comments],\n      };\n    });\n  };\n\n  // Get all posts\n  useEffect(() => {\n    const options = {\n      method: \"GET\",\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n    fetch(`${baseUrl}/posts/all`, options)\n      .then((res) => {\n        return res.json();\n      })\n      .then((data) => {\n        setPosts(data);\n        setLoading(false);\n      });\n  }, []);\n\n  // Change published status\n  const publish = (e) => {\n    e.preventDefault();\n\n    const id = e.target.getAttribute(\"data-id\");\n\n    // Find which post to change published on\n    let index;\n    const filteredPost = posts.filter((el, i) => {\n      if (el._id === id) {\n        index = i;\n      }\n      return el._id === id;\n    })[0];\n\n    const options = {\n      method: \"PATCH\",\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${auth.token}`,\n      },\n      body: JSON.stringify({ id, published: filteredPost.published }),\n    };\n    // Change published status on server\n    fetch(`${baseUrl}/posts/${id}/publish`, options)\n      .then((res) => {\n        if (res.status === 401) {\n          throw new Error(\"Unauthorized\");\n        }\n        return res.json();\n      })\n      .then((data) => {\n        if (data.status === \"Success\") {\n          const clonedPosts = clonePosts(posts);\n          clonedPosts.splice(index, 1, data.post);\n          setPosts(clonedPosts);\n        }\n      })\n      .catch((err) => {\n        if (err.message === \"Unauthorized\") {\n          history.push(\"/login\");\n        }\n      });\n  };\n\n  let postsDisplay = [];\n  if (posts.length) {\n    postsDisplay = posts.map((post) => {\n      return (\n        <li key={post._id} className=\"post\">\n          <Link to={`/${post._id}`}>\n            <h1>{post.title}</h1>\n            <p className=\"date\">{new Date(post.date).toLocaleDateString()}</p>\n            {post.published ? (\n              <div className=\"published\">\n                <p>Status: Published</p>\n                <button onClick={publish} data-id={post._id}>\n                  Change\n                </button>\n              </div>\n            ) : (\n              <div className=\"published\">\n                <p>Status: Unpublished</p>\n                <button onClick={publish} data-id={post._id}>\n                  Change\n                </button>\n              </div>\n            )}\n          </Link>\n        </li>\n      );\n    });\n  }\n\n  // Save form values to state\n  const [comment, setComment] = useState({\n    username: \"\",\n    text: \"\",\n  });\n\n  const handleInput = (e) => {\n    setComment({\n      ...comment,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  // Submit comment form\n  const addComment = (e) => {\n    e.preventDefault();\n\n    const id = e.target.getAttribute(\"data-id\");\n\n    const options = {\n      method: \"POST\",\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(comment),\n    };\n    // Save new comment on server database\n    fetch(`${baseUrl}/posts/${id}/comment`, options)\n      .then((res) => {\n        return res.json();\n      })\n      .then((data) => {\n        let index;\n        // Find which post to add comment to and its index in state array\n        const filteredPost = posts.filter((el, i) => {\n          if (el._id === id) {\n            index = i;\n          }\n          return el._id === id;\n        })[0];\n\n        // If successfully added to database add to react state\n        if (data.status === \"Success\") {\n          // Update state immutably\n          const clonedPosts = clonePosts(posts);\n          clonedPosts.splice(index, 1, {\n            ...filteredPost,\n            comments: [\n              ...filteredPost.comments,\n              {\n                ...data.comment,\n                date: Date.now(),\n              },\n            ],\n          });\n          setPosts(clonedPosts);\n\n          // Reset form\n          setComment({\n            username: \"\",\n            text: \"\",\n          });\n        }\n      });\n  };\n\n  // New Post form values\n  const [postForm, setPostForm] = useState({\n    title: \"\",\n    text: \"\",\n    published: false,\n  });\n\n  // Handle input from new post form\n  const handlePostInput = (e) => {\n    // If clicked on checkboxes\n    if (e.target.name === \"published\") {\n      setPostForm({\n        ...postForm,\n        [e.target.name]: \"true\" === e.target.value,\n      });\n\n      // Typing in inputs\n    } else {\n      setPostForm({\n        ...postForm,\n        [e.target.name]: e.target.value,\n      });\n    }\n  };\n\n  // Submit new post\n  const newPost = (e) => {\n    e.preventDefault();\n    console.log(postForm);\n    setLoading(true);\n\n    const options = {\n      method: \"POST\",\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${auth.token}`,\n      },\n      body: JSON.stringify(postForm),\n    };\n\n    // Save new post to server\n    fetch(`${baseUrl}/posts`, options)\n      .then((res) => {\n        if (res.status === 401) {\n          throw new Error(\"Unauthorized\");\n        }\n        return res.json();\n      })\n      .then((data) => {\n        if (data.status === \"Success\") {\n          // Save to react state\n          const clonedPosts = clonePosts(posts);\n          setPosts([...clonedPosts, data.newPost]);\n          history.push(\"/\");\n\n          // Reset form data\n          setPostForm({\n            title: \"\",\n            text: \"\",\n            published: false,\n          });\n          setLoading(false);\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n        if (err.message === \"Unauthorized\") {\n          history.push(\"/login\");\n        }\n      });\n  };\n\n  // Delete Post\n  const deletePost = (e) => {\n    const id = e.target.getAttribute(\"data-id\");\n    setLoading(true);\n    // Find index of which post to delete\n    let index;\n    const filteredPost = posts.filter((el, i) => {\n      if (el._id === id) {\n        index = i;\n      }\n      return el._id === id;\n    })[0];\n\n    const options = {\n      method: \"DELETE\",\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${auth.token}`,\n      },\n      body: JSON.stringify({ id }),\n    };\n\n    // Delete post from server\n    fetch(`${baseUrl}/posts/${id}`, options)\n      .then((res) => {\n        if (res.status === 401) {\n          throw new Error(\"Unauthorized\");\n        }\n        return res.json();\n      })\n      .then((data) => {\n        // Delete from state\n        if (data.status === \"Success\") {\n          const clonedPosts = clonePosts(posts);\n          clonedPosts.splice(index, 1);\n          history.replace(\"/\");\n          setPosts(clonedPosts);\n          setLoading(false)\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n        if (err.message === \"Unauthorized\") {\n          history.push(\"/login\");\n        }\n      });\n  };\n\n  // Edit form state\n  const [editPost, setEditPost] = useState({\n    title: \"\",\n    text: \"\",\n    published: false,\n  });\n\n  // Set values of pre filled edit form data\n  const startEditing = (id) => {\n    const filteredPost = posts.filter((el) => {\n      return el._id === id;\n    })[0];\n    setEditPost({\n      title: filteredPost.title,\n      text: filteredPost.text,\n      published: filteredPost.published,\n    });\n  };\n\n  // Handle input change\n  const handleEditInput = (e) => {\n    if (e.target.name === \"published\") {\n      setEditPost({\n        ...editPost,\n        [e.target.name]: \"true\" === e.target.value,\n      });\n    } else {\n      setEditPost({\n        ...editPost,\n        [e.target.name]: e.target.value,\n      });\n    }\n  };\n\n  // Handle submission of edit form data\n  const handleEditSubmit = (e) => {\n    const id = e.target.getAttribute(\"data-id\");\n    setLoading(true)\n\n    // Find index of which post to update\n    let index;\n    const filteredPost = posts.filter((el, i) => {\n      if (el._id === id) {\n        index = i;\n      }\n      return el._id === id;\n    })[0];\n    e.preventDefault();\n    console.log(editPost);\n    const options = {\n      method: \"PATCH\",\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${auth.token}`,\n      },\n      body: JSON.stringify({ id, ...editPost }),\n    };\n    fetch(`${baseUrl}/posts/${id}`, options)\n      .then((res) => {\n        if (res.status === 401) {\n          throw new Error(\"Unauthorized\");\n        }\n        return res.json();\n      })\n      .then((data) => {\n        // Change post in state\n        history.push(`/${id}`);\n        const clonedPosts = clonePosts(posts);\n        clonedPosts.splice(index, 1, data.editedPost);\n        setPosts(clonedPosts);\n        setLoading(false)\n      })\n      .catch((err) => {\n        setLoading(false)\n        if (err.message === \"Unauthorized\") {\n          history.push(\"/login\");\n        }\n      });\n  };\n\n  // Delete comment\n  const deleteComment = (id, commentId) => {\n    // Find index of which post to update\n    let index;\n    const filteredPost = posts.filter((el, i) => {\n      if (el._id === id) {\n        index = i;\n      }\n      return el._id === id;\n    })[0];\n    const options = {\n      method: \"DELETE\",\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${auth.token}`,\n      },\n    };\n    fetch(`${baseUrl}/posts/${id}/comment/${commentId}`, options)\n      .then((res) => {\n        if (res.status === 401) {\n          throw new Error(\"Unauthorized\");\n        }\n        return res.json();\n      })\n      .then((data) => {\n        // Change post in state\n        if (data.status === \"Success\") {\n          const clonedPosts = clonePosts(posts);\n          const filteredComments = filteredPost.comments.filter((el) => {\n            return el._id !== commentId;\n          });\n          clonedPosts[index].comments = filteredComments;\n          setPosts(clonedPosts);\n        }\n      })\n      .catch((err) => {\n        if (err.message === \"Unauthorized\") {\n          history.push(\"/login\");\n        }\n      });\n  };\n\n  // Login form values\n  const [loginForm, setLoginForm] = useState({\n    username: \"\",\n    password: \"\",\n  });\n\n  // Login form input handler\n  const loginFormInput = (e) => {\n    setLoginForm({\n      ...loginForm,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const [auth, setAuth] = useState({});\n\n  // Log user in on form submission\n  const login = (e) => {\n    e.preventDefault();\n    console.log(loginForm);\n    const options = {\n      method: \"POST\",\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(loginForm),\n    };\n    fetch(\"${baseUrl}/posts/login\", options)\n      .then((res) => res.json())\n      .then((data) => {\n        if (data.message === \"Auth Passed\") {\n          setAuth({\n            ...auth,\n            token: data.token,\n            loggedIn: true,\n            expires: data.expires,\n          });\n          // Store token in local storage\n          localStorage.setItem(\"token\", data.token);\n          localStorage.setItem(\"expires\", Date.now() + data.expires * 1000);\n          setLoginForm({\n            username: \"\",\n            password: \"\",\n          });\n          history.push(\"/\");\n        }\n      })\n      .catch((err) => {\n        console.log(\"ERROR\", err);\n      });\n  };\n\n  // Auto login with local storage if possible on start\n  const getToken = () => {\n    const token = localStorage.getItem(\"token\");\n    const expires = localStorage.getItem(\"expires\");\n    if (Date.now() < Number(expires)) {\n      setAuth({ token, loggedIn: true });\n    }\n  };\n\n  useEffect(() => {\n    getToken();\n  }, []);\n\n  return loading ? (\n    <Spinner></Spinner>\n    \n  ) : (\n    <div className=\"App\">\n      <Switch>\n        <Route path=\"/login\">\n          <Login\n            login={login}\n            loginForm={loginForm}\n            loginFormInput={loginFormInput}\n          />\n        </Route>\n        <Route path=\"/new\">\n          <Auth auth={auth}>\n            <NewForm\n              newPost={newPost}\n              handlePostInput={handlePostInput}\n              postForm={postForm}\n            />\n          </Auth>\n        </Route>\n        <Route path=\"/:id/edit\">\n          <Auth auth={auth}>\n            <EditForm\n              postForm={postForm}\n              posts={posts}\n              startEditing={startEditing}\n              handleEditInput={handleEditInput}\n              editPost={editPost}\n              handleEditSubmit={handleEditSubmit}\n            />\n          </Auth>\n        </Route>\n        <Route path=\"/:id\">\n          <Auth auth={auth}>\n            <Post\n              posts={posts}\n              addComment={addComment}\n              handleInput={handleInput}\n              comment={comment}\n              deletePost={deletePost}\n              deleteComment={deleteComment}\n            />\n          </Auth>\n        </Route>\n        <Route exact path=\"/\">\n          <Auth auth={auth}>\n            <div className=\"title\">\n              <h1>My Blog Posts</h1>\n              <Link to=\"/new\">New Post</Link>\n            </div>\n            <ul>{postsDisplay}</ul>\n          </Auth>\n        </Route>\n      </Switch>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}